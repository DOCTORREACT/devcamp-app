import React, { useState, useEffect } from 'react'
import { connect } from "react-redux"
import { Redirect } from 'react-router-dom'
import './Register.css'
import axios from "axios";
import Input from "components/Input/Input";
import Button from "components/Button/Button";
import RegisterIcon from 'icons/registerIcon'
import passwordValidator from 'helpers/passwordValidator'

const registerUrl = 'http://devcamp-api-node.herokuapp.com/api/v1/auth/register'

const Register = props => {

    const [name, setName] = useState('')
    const [email, setEmail] = useState('')
    const [password, setPassword] = useState('')
    const [role, setRole] = useState('regular')
    const [confirmPassword, setConfirmPassword] = useState('')
    const [successfulSubmit, setSuccessfulSubmit] = useState(false)

    const inputChangeHandler = e => {
        switch (e.target.name) {
            case 'user_name': setName(e.target.value);break;
            case 'user_email': setEmail(e.target.value);break;
            case 'user_password': setPassword(e.target.value);break;
            case 'user_confirm_password':setConfirmPassword(e.target.value);break;
            case 'user_role': setRole(e.target.value)
        }
    }

    const submitHandler = e => {
        e.preventDefault()
        const user = { name, email, password, role }

        axios.post(registerUrl, user)
            .then(response => {
                props.addUser(user);
                setSuccessfulSubmit(true);
                props.ifRegisterDoneGetSuccessAndToken(response.data)
                localStorage.setItem('token',response.data.token)
            })
            .catch(error => {console.log('error----->', error)})
    }
    

    useEffect(() => {
        if(confirmPassword == '') {
            document.querySelector('.register_warnings').classList.remove('show')
            return
        }
        if(!passwordValidator(password, confirmPassword)){
           let regWarnings = document.querySelector('.register_warnings')
           regWarnings.innerText = 'Passwords mismatch!'
           regWarnings.classList.add('show')
        }
        
    }, [ confirmPassword  ])

    if(successfulSubmit) {
        return  <Redirect to={'/login'}/>
    }

    return (
        <div className={'register_container'} >
            <form onSubmit={submitHandler} className={'register_form'}>
                <div className={'register_title'}>
                    <RegisterIcon />
                    <h1>Register</h1>
                    </div>
                <p className={'register_info'}>Register to list your bootcamp or rate, review and favorite bootcamps</p>
                <p className={'register_warnings'}></p>
                <p className={'label'}>Name</p>
                <Input
                    className={'register'}
                    title={'Enter Full Name'}
                    onChangeInput={inputChangeHandler}
                    name={'user_name'}
                />
                <p className={'label'}> Email Address</p>
                <Input
                    className={'register'}
                    title={'Enter Email'}
                    onChangeInput={inputChangeHandler}
                    name={'user_email'}
                />
                <p className={'label'}>Password</p>
                <Input
                    type={'password'}
                    className={'register'}
                    title={'Enter Password'}
                    onChangeInput={inputChangeHandler}
                    name={'user_password'}
                />
                <p className={'label'}>Confirm Password</p>
                <Input
                    type={'password'}
                    className={'register'}
                    title={'Confirm Password'}
                    onChangeInput={inputChangeHandler}
                    name={'user_confirm_password'}
                />
                <div className={'register_role'}>
                    <p>User Role</p>
                    <div>
                        <input
                            type="radio"
                            name={'user_role'}
                            onChange={inputChangeHandler}
                            value={'publisher'}
                        /> <span>Regular User (Browse, Write reviews, etc)</span>
                    </div>
                    <div>
                        <input
                            type="radio"
                            name={'user_role'}
                            onChange={inputChangeHandler}
                            value={'publisher'}
                        /> <span>Bootcamp Publisher</span>
                    </div>
                </div>
                <p className={'register_warning'}>
                    * You must be affiliated with the bootcamp in some way in order to add it to DevCamper.
                </p>

                <Button className={'register'} title={'Register'} />
            </form>
        </div>
    )
}

function mapStateToProps(state) {
    return {
        inSystem: state.inSystem,
        registerDone: state.registerDone
    }
}

function mapDispatchToProps(dispatch) {
    return {
        addUser: info => dispatch({ type: 'REGISTER_USER', payload: info }),
        ifRegisterDoneGetSuccessAndToken: info => dispatch({ type: 'REGISTER_DONE', payload: info })

    }
}

export default connect(mapStateToProps, mapDispatchToProps) (Register)

